// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2020 Association Prologin <association@prologin.org>

// This file contains the code to call the API functions from the C++ language.
// This file was generated by stechec2-generator. DO NOT EDIT.

#include "api.hh"

// This file only contains simple C++ wrappers around the API, that are
// basically already C++ functions, but with an `extern "C"`.

extern "C" position api_carte_taille();
position carte_taille()
{
    return api_carte_taille();
}

extern "C" position api_carte_depart();
position carte_depart()
{
    return api_carte_depart();
}

extern "C" zone_type api_carte_zone_type(position pos);
zone_type carte_zone_type(position pos)
{
    return api_carte_zone_type(pos);
}

extern "C" std::vector<perso_info> api_carte_zone_perso(position pos);
std::vector<perso_info> carte_zone_perso(position pos)
{
    return api_carte_zone_perso(pos);
}

extern "C" int api_distance(position p1, position p2);
int distance(position p1, position p2)
{
    return api_distance(p1, p2);
}

extern "C" std::vector<position> api_chemin(position p1, position p2);
std::vector<position> chemin(position p1, position p2)
{
    return api_chemin(p1, p2);
}

extern "C" erreur api_perso_deplace(perso_info perso, std::vector<position> chemin, orientation direction);
erreur perso_deplace(perso_info perso, std::vector<position> chemin, orientation direction)
{
    return api_perso_deplace(perso, chemin, direction);
}

extern "C" std::vector<position> api_perso_penombre(perso_info perso);
std::vector<position> perso_penombre(perso_info perso)
{
    return api_perso_penombre(perso);
}

extern "C" std::vector<position> api_perso_vision(perso_info perso);
std::vector<position> perso_vision(perso_info perso)
{
    return api_perso_vision(perso);
}

extern "C" std::vector<position> api_perso_vision_personnages(perso_info perso);
std::vector<position> perso_vision_personnages(perso_info perso)
{
    return api_perso_vision_personnages(perso);
}

extern "C" std::vector<position> api_palantir_vision();
std::vector<position> palantir_vision()
{
    return api_palantir_vision();
}

extern "C" std::vector<position> api_elfe_vision();
std::vector<position> elfe_vision()
{
    return api_elfe_vision();
}

extern "C" erreur api_perso_attaque(perso_info perso, attaque_type attaque, position pos);
erreur perso_attaque(perso_info perso, attaque_type attaque, position pos)
{
    return api_perso_attaque(perso, attaque, pos);
}

extern "C" int api_perso_attaque_recharge(perso_info perso, attaque_type attaque);
int perso_attaque_recharge(perso_info perso, attaque_type attaque)
{
    return api_perso_attaque_recharge(perso, attaque);
}

extern "C" position api_perso_position(perso_info perso);
position perso_position(perso_info perso)
{
    return api_perso_position(perso);
}

extern "C" perso_info api_perso_classe_info(perso_classe classe);
perso_info perso_classe_info(perso_classe classe)
{
    return api_perso_classe_info(classe);
}

extern "C" int api_mon_equipe();
int mon_equipe()
{
    return api_mon_equipe();
}

extern "C" std::vector<int> api_scores();
std::vector<int> scores()
{
    return api_scores();
}

extern "C" int api_nombre_equipes();
int nombre_equipes()
{
    return api_nombre_equipes();
}

extern "C" int api_tour_actuel();
int tour_actuel()
{
    return api_tour_actuel();
}

extern "C" int api_nombre_tours_placement();
int nombre_tours_placement()
{
    return api_nombre_tours_placement();
}

extern "C" int api_nombre_tours();
int nombre_tours()
{
    return api_nombre_tours();
}

extern "C" void api_afficher_perso_classe(perso_classe v);
void afficher_perso_classe(perso_classe v)
{
    api_afficher_perso_classe(v);
}

extern "C" void api_afficher_zone_type(zone_type v);
void afficher_zone_type(zone_type v)
{
    api_afficher_zone_type(v);
}

extern "C" void api_afficher_attaque_type(attaque_type v);
void afficher_attaque_type(attaque_type v)
{
    api_afficher_attaque_type(v);
}

extern "C" void api_afficher_orientation(orientation v);
void afficher_orientation(orientation v)
{
    api_afficher_orientation(v);
}

extern "C" void api_afficher_erreur(erreur v);
void afficher_erreur(erreur v)
{
    api_afficher_erreur(v);
}

extern "C" void api_afficher_position(position v);
void afficher_position(position v)
{
    api_afficher_position(v);
}

extern "C" void api_afficher_perso_info(perso_info v);
void afficher_perso_info(perso_info v)
{
    api_afficher_perso_info(v);
}
